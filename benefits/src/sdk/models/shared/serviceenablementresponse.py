"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import List, Optional

class ServiceState(str, Enum):
    DISABLED = 'Disabled'
    ENABLED = 'Enabled'
    PENDING = 'Pending'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ServiceEnablementResponse:
    UNSET='__SPEAKEASY_UNSET__'
    enabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled') }})
    service_state: ServiceState = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceState') }})
    missing_properties: Optional[List[str]] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('missingProperties'), 'exclude': lambda f: f is ServiceEnablementResponse.UNSET }})
    test: Optional[str] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('test'), 'exclude': lambda f: f is ServiceEnablementResponse.UNSET }})
    

